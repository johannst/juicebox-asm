var searchIndex = new Map(JSON.parse('[\
["add",{"doc":"Add example.","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[],"b":[]}],\
["fib",{"doc":"Fibonacci example.","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[],"b":[]}],\
["juicebox_asm",{"doc":"A simple <code>x64</code> jit assembler with a minimal runtime to …","t":"FFFFFPPFGGGGGFNNNNNPPPPNPNNNNNNNNNNNNNNNNNNNNNNNNPPPNPPNNNNNNNNNNNPNNPPPPNNNPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKKKKKKKKKKKKKMMMMMMMMMMMMM","n":["Asm","Imm16","Imm32","Imm64","Imm8","Indirect","IndirectDisp","Label","MemOp","Reg16","Reg32","Reg64","Reg8","Runtime","add","add","add","add","add_code","ah","al","ax","bh","bind","bl","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bp","bpl","bx","call","ch","cl","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmovnz","cmovz","cmp","cx","dec","dec","dh","di","dil","dl","drop","drop","dump","dx","eax","ebp","ebx","ecx","edi","edx","esi","esp","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","insn","into","into","into","into","into","into","into","into","into","into","into","into","into_code","jmp","jnz","jz","mov","mov","mov","mov","mov","mov","mov","mov","mov","mov","mov","mov","mov","mov","mov","mov","mov","new","new","new","nop","pop","pop","push","push","r10","r10d","r10l","r10w","r11","r11d","r11l","r11w","r12","r12d","r12l","r12w","r13","r13d","r13l","r13w","r14","r14d","r14l","r14w","r15","r15d","r15l","r15w","r8","r8d","r8l","r8w","r9","r9d","r9l","r9w","rax","rbp","rbx","rcx","rdi","rdx","ret","rsi","rsp","si","sil","sp","spl","test","test","test","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_profile","Add","Call","Cmovnz","Cmovz","Cmp","Dec","Jmp","Jnz","Jz","Mov","Pop","Push","Test","add","call","cmovnz","cmovz","cmp","dec","jmp","jnz","jz","mov","pop","push","test"],"q":[[0,"juicebox_asm"],[250,"juicebox_asm::insn"],[276,"core::convert"],[277,"alloc::vec"],[278,"core::result"],[279,"core::any"]],"d":["<code>x64</code> jit assembler.","Type representing a 16 bit immediate.","Type representing a 32 bit immediate.","Type representing a 64 bit immediate.","Type representing an 8 bit immediate.","An indirect memory operand, eg <code>mov [rax], rcx</code>.","An indirect memory operand with additional displacement, …","A label which is used as target for jump instructions.","Type representing a memory operand.","Definition of 16 bit registers.","Definition of 32 bit registers.","Definition of 64 bit registers.","Definition of 8 bit registers.","A simple <code>mmap</code>ed runtime with executable pages.","","","","","Add the block of <code>code</code> to the runtime and a get function …","","","","","Bind the Label to the current location.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unmaps the code page. This invalidates all the function …","Dump the code added so far to the runtime into a file …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Trait definitions of various instructions.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume the assembler and get the emitted code.","","","","","","","","","","","","","","","","","","","","","Create a new <code>x64</code> jit assembler.","Create a new <code>unbound</code> Label.","Create a new Runtime.","Emit a <code>nop</code> instruction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Emit a <code>ret</code> instruction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new Runtime which also generates static perf …","Trait for <code>add</code> instruction kinds.","Trait for <code>call</code> instruction kinds.","","","Trait for <code>cmp</code> instruction kinds.","Trait for <code>dec</code> instruction kinds.","Trait for <code>jmp</code> instruction kinds.","Trait for <code>jnz</code> instruction kinds.","Trait for <code>jz</code> instruction kinds.","Trait for <code>mov</code> instruction kinds.","Trait for <code>pop</code> instruction kinds.","Trait for <code>push</code> instruction kinds.","Trait for <code>test</code> instruction kinds.","Emit an add instruction.","Emit a call instruction.","Emit a (conditional) move if not zero instruction.","Emit a (conditional) move if zero instruction.","Emit a compare instruction.","Emit a decrement instruction.","Emit an unconditional jump instruction.","Emit a conditional jump if not zero instruction (<code>ZF = 0</code>).","Emit a conditional jump if zero instruction (<code>ZF = 1</code>).","Emit an move instruction.","Emit a pop instruction.","Emit a push instruction.","Emit a logical compare instruction."],"i":[0,0,0,0,0,2,2,0,0,0,0,0,0,0,1,1,1,1,8,13,13,3,13,1,13,1,12,8,2,14,5,19,21,6,7,3,13,1,12,8,2,14,5,19,21,6,7,3,13,3,13,3,1,13,13,6,7,3,13,6,7,3,13,1,1,1,3,1,1,13,3,13,13,12,8,8,3,7,7,7,7,7,7,7,7,1,12,8,2,14,14,14,5,5,5,5,5,19,19,19,19,19,19,19,21,21,21,21,21,21,21,21,21,21,21,6,7,3,13,0,1,12,8,2,14,5,19,21,6,7,3,13,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,8,1,1,1,1,1,6,7,13,3,6,7,13,3,6,7,13,3,6,7,13,3,6,7,13,3,6,7,13,3,6,7,13,3,6,7,13,3,6,6,6,6,6,6,1,6,6,3,13,3,13,1,1,1,6,7,3,13,1,12,8,2,14,5,19,21,6,7,3,13,1,12,8,2,14,5,19,21,6,7,3,13,1,12,8,2,14,5,19,21,6,7,3,13,8,0,0,0,0,0,0,0,0,0,0,0,0,0,29,30,31,32,33,34,35,36,37,38,39,40,41],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3],4],[[1,2,5],4],[[1,6,6],4],[[1,7,7],4],[[8,-1],-2,[[11,[[10,[9]]]]],[]],0,0,0,0,[[1,12],4],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[1,6],4],0,0,[6,6],[7,7],[3,3],[13,13],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[1,6,6],4],[[1,6,6],4],[[1,2,5],4],0,[[1,6],4],[[1,7],4],0,0,0,0,[12,4],[8,4],[8,4],0,0,0,0,0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[9,14],[15,14],[16,5],[9,5],[15,5],[-1,-1,[]],[17,5],[18,19],[15,19],[16,19],[17,19],[9,19],[-1,-1,[]],[20,19],[17,21],[16,21],[22,21],[23,21],[24,21],[9,21],[20,21],[18,21],[25,21],[-1,-1,[]],[15,21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[26,[9]]]],[[1,12],4],[[1,12],4],[[1,12],4],[[1,6,6],4],[[1,2,7],4],[[1,13,2],4],[[1,2,5],4],[[1,13,13],4],[[1,3,2],4],[[1,7,2],4],[[1,3,5],4],[[1,7,7],4],[[1,6,21],4],[[1,2,13],4],[[1,2,3],4],[[1,6,2],4],[[1,13,14],4],[[1,2,6],4],[[1,3,3],4],[[1,7,19],4],[[],1],[[],12],[[],8],[1,4],[[1,3],4],[[1,6],4],[[1,3],4],[[1,6],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,4],0,0,0,0,0,0,[[1,2,5],4],[[1,6,6],4],[[1,7,7],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,[[29,-1,-2],4,[],[]],[[30,-1],4,[]],[[31,-1,-2],4,[],[]],[[32,-1,-2],4,[],[]],[[33,-1,-2],4,[],[]],[[34,-1],4,[]],[[35,-1],4,[]],[[36,-1],4,[]],[[37,-1],4,[]],[[38,-1,-2],4,[],[]],[[39,-1],4,[]],[[40,-1],4,[]],[[41,-1,-2],4,[],[]]],"c":[],"p":[[5,"Asm",0],[6,"MemOp",0],[6,"Reg16",0],[1,"tuple"],[5,"Imm16",0],[6,"Reg64",0],[6,"Reg32",0],[5,"Runtime",0],[1,"u8"],[1,"slice"],[10,"AsRef",276],[5,"Label",0],[6,"Reg8",0],[5,"Imm8",0],[1,"i8"],[1,"u16"],[1,"i16"],[1,"u32"],[5,"Imm32",0],[1,"i32"],[5,"Imm64",0],[1,"i64"],[1,"isize"],[1,"usize"],[1,"u64"],[5,"Vec",277],[6,"Result",278],[5,"TypeId",279],[10,"Add",250],[10,"Call",250],[10,"Cmovnz",250],[10,"Cmovz",250],[10,"Cmp",250],[10,"Dec",250],[10,"Jmp",250],[10,"Jnz",250],[10,"Jz",250],[10,"Mov",250],[10,"Pop",250],[10,"Push",250],[10,"Test",250]],"b":[[14,"impl-Add%3CMemOp,+Reg16%3E-for-Asm"],[15,"impl-Add%3CMemOp,+Imm16%3E-for-Asm"],[16,"impl-Add%3CReg64,+Reg64%3E-for-Asm"],[17,"impl-Add%3CReg32,+Reg32%3E-for-Asm"],[67,"impl-Dec%3CReg64%3E-for-Asm"],[68,"impl-Dec%3CReg32%3E-for-Asm"],[90,"impl-From%3Cu8%3E-for-Imm8"],[91,"impl-From%3Ci8%3E-for-Imm8"],[92,"impl-From%3Cu16%3E-for-Imm16"],[93,"impl-From%3Cu8%3E-for-Imm16"],[94,"impl-From%3Ci8%3E-for-Imm16"],[96,"impl-From%3Ci16%3E-for-Imm16"],[97,"impl-From%3Cu32%3E-for-Imm32"],[98,"impl-From%3Ci8%3E-for-Imm32"],[99,"impl-From%3Cu16%3E-for-Imm32"],[100,"impl-From%3Ci16%3E-for-Imm32"],[101,"impl-From%3Cu8%3E-for-Imm32"],[103,"impl-From%3Ci32%3E-for-Imm32"],[104,"impl-From%3Ci16%3E-for-Imm64"],[105,"impl-From%3Cu16%3E-for-Imm64"],[106,"impl-From%3Ci64%3E-for-Imm64"],[107,"impl-From%3Cisize%3E-for-Imm64"],[108,"impl-From%3Cusize%3E-for-Imm64"],[109,"impl-From%3Cu8%3E-for-Imm64"],[110,"impl-From%3Ci32%3E-for-Imm64"],[111,"impl-From%3Cu32%3E-for-Imm64"],[112,"impl-From%3Cu64%3E-for-Imm64"],[114,"impl-From%3Ci8%3E-for-Imm64"],[136,"impl-Mov%3CReg64,+Reg64%3E-for-Asm"],[137,"impl-Mov%3CMemOp,+Reg32%3E-for-Asm"],[138,"impl-Mov%3CReg8,+MemOp%3E-for-Asm"],[139,"impl-Mov%3CMemOp,+Imm16%3E-for-Asm"],[140,"impl-Mov%3CReg8,+Reg8%3E-for-Asm"],[141,"impl-Mov%3CReg16,+MemOp%3E-for-Asm"],[142,"impl-Mov%3CReg32,+MemOp%3E-for-Asm"],[143,"impl-Mov%3CReg16,+Imm16%3E-for-Asm"],[144,"impl-Mov%3CReg32,+Reg32%3E-for-Asm"],[145,"impl-Mov%3CReg64,+Imm64%3E-for-Asm"],[146,"impl-Mov%3CMemOp,+Reg8%3E-for-Asm"],[147,"impl-Mov%3CMemOp,+Reg16%3E-for-Asm"],[148,"impl-Mov%3CReg64,+MemOp%3E-for-Asm"],[149,"impl-Mov%3CReg8,+Imm8%3E-for-Asm"],[150,"impl-Mov%3CMemOp,+Reg64%3E-for-Asm"],[151,"impl-Mov%3CReg16,+Reg16%3E-for-Asm"],[152,"impl-Mov%3CReg32,+Imm32%3E-for-Asm"],[157,"impl-Pop%3CReg16%3E-for-Asm"],[158,"impl-Pop%3CReg64%3E-for-Asm"],[159,"impl-Push%3CReg16%3E-for-Asm"],[160,"impl-Push%3CReg64%3E-for-Asm"],[206,"impl-Test%3CMemOp,+Imm16%3E-for-Asm"],[207,"impl-Test%3CReg64,+Reg64%3E-for-Asm"],[208,"impl-Test%3CReg32,+Reg32%3E-for-Asm"]]}],\
["tiny_vm",{"doc":"TinyVm example.","t":"PPPPPPPFPPPFPGGFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHNNNNNNNNNNNNNNNNNNNNNNN","n":["A","Add","Addi","B","Branch","BranchZero","C","Fixup","Halt","Load","LoadImm","PhysAddr","Store","TinyInsn","TinyReg","TinyVm","bind","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","dump","eq","eq","fmt","fmt","from","from","from","from","from","interp","into","into","into","into","into","into","jit","make_tinyvm_fib","make_tinyvm_jit_perf","make_tinyvm_jit_test","new","new","read_mem","read_reg","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write_mem","write_reg"],"q":[[0,"tiny_vm"],[75,"alloc::vec"],[76,"core::fmt"],[77,"core::fmt"],[78,"core::any"]],"d":["","Add the register to the register <code>reg1 += reg2</code>.","Add the immediate to the register <code>reg += imm</code>.","","Jump unconditional (absolute addressing) <code>pc = disp</code>.","Jump if the register is zero (absolute addressing) …","","A minial fixup utility to implement jump labels when …","Halt the VM.","Load a value from the memory (absolute addressing) into …","Load the immediate value into the register <code>reg = imm</code>.","A guest physical address.","Store a value from the register into the memory (absolute …","The instructions for the <code>TinyVm</code>.","The registers for the <code>TinyVm</code>.","The <code>TinyVm</code> virtual machine state.","Bind the <code>Fixup</code> to the current location of <code>prog</code> and resolve …","","","","","","","","","","","","","","","Dump the VM state to stdout.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Run in interpreter mode until the next <code>TinyInsn::Halt</code> …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Run in JIT mode until the next <code>TinyInsn::Halt</code> instruction …","Generate a guest program to compute the fiibonacci …","Generate a simple count down loop to crunch some …","Generate a test program for the jit.","Create a new <code>TinyVm</code> and initialize the instruction memory …","Create a new <code>Fixup</code> at the current pc.","Read guest data memory.","Read guest register.","","","","","","","","","","","","","","","","","","Write guest data memory.","Write guest register."],"i":[5,2,2,5,2,2,5,0,2,2,2,0,2,0,0,0,1,10,6,1,5,2,10,6,1,5,2,5,2,5,2,6,5,2,5,2,10,6,1,5,2,6,10,10,6,1,5,2,6,0,0,0,6,1,6,6,5,2,10,6,1,5,2,10,6,1,5,2,10,6,1,5,2,6,6],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,[3,[2]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,5],[2,2],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[6,4],[[5,5],7],[[2,2],7],[[5,8],9],[[2,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[6,4],[10,11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,4],[12,[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[[3,[2]]],6],[11,1],[[6,10],12],[[6,5],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[[6,10,12],4],[[6,5,12],4]],"c":[],"p":[[5,"Fixup",0],[6,"TinyInsn",0],[5,"Vec",75],[1,"tuple"],[6,"TinyReg",0],[5,"TinyVm",0],[1,"bool"],[5,"Formatter",76],[8,"Result",76],[5,"PhysAddr",0],[1,"usize"],[1,"u16"],[6,"Result",77],[5,"TypeId",78]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
