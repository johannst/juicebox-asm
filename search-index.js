var searchIndex = JSON.parse('{\
"juicebox_asm":{"doc":"A simple <code>x64</code> jit assembler with a minimal runtime to …","t":"DDDDDNNDEEEEEDLLNNLNNLNLLLLLLNNNLNNNLLNNNNLNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLNNNNNNLLLLLLLLLLLICIIDDDDIIIDCIEEEEIKNNNNNLLLLLLLLLLLLLLLLLLNNNKNNLLLLLLLLNKNNNNLNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Asm","Imm16","Imm32","Imm64","Imm8","Indirect","IndirectDisp","Label","MemOp","Reg16","Reg32","Reg64","Reg8","Runtime","add","add","ah","al","as_fn","ax","bh","bind","bl","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bp","bpl","bx","call","ch","cl","cx","dec","dec","dh","di","dil","dl","drop","dx","eax","ebp","ebx","ecx","edi","edx","esi","esp","from","from","from","into","into","into","into_code","jmp","jnz","jz","mov","mov","mov","mov","mov","mov","mov","mov","mov","mov","mov","mov","mov","mov","mov","mov","new","new","nop","prelude","r10","r10d","r10l","r10w","r11","r11d","r11l","r11w","r12","r12d","r12l","r12w","r13","r13d","r13l","r13w","r14","r14d","r14l","r14w","r15","r15d","r15l","r15w","r8","r8d","r8l","r8w","r9","r9d","r9l","r9w","rax","rbp","rbx","rcx","rdi","rdx","resolve","ret","rsi","rsp","si","sil","sp","spl","test","test","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Add","Asm","Call","Dec","Imm16","Imm32","Imm64","Imm8","Jmp","Jnz","Jz","Label","MemOp","Mov","Reg16","Reg32","Reg64","Reg8","Test","add","ah","al","ax","bh","bl","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bp","bpl","bx","call","ch","cl","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cx","dec","dh","di","dil","dl","drop","dx","eax","ebp","ebx","ecx","edi","edx","esi","esp","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","jmp","jnz","jz","mov","new","r10","r10d","r10l","r10w","r11","r11d","r11l","r11w","r12","r12d","r12l","r12w","r13","r13d","r13l","r13w","r14","r14d","r14l","r14w","r15","r15d","r15l","r15w","r8","r8d","r8l","r8w","r9","r9d","r9l","r9w","rax","rbp","rbx","rcx","rdi","rdx","rsi","rsp","si","sil","sp","spl","test","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"juicebox_asm"],[139,"juicebox_asm::prelude"]],"d":["<code>x64</code> jit assembler.","Type representing a 16 bit immediate.","Type representing a 32 bit immediate.","Type representing a 64 bit immediate.","Type representing an 8 bit immediate.","An indirect memory operand, eg <code>mov [rax], rcx</code>.","An indirect memory operand with additional displacement, …","A label which is used as target for jump instructions.","Type representing a memory operand.","Definition of 16 bit registers.","Definition of 32 bit registers.","Definition of 64 bit registers.","Definition of 8 bit registers.","A simple <code>mmap</code>ed runtime with executable pages.","","","","","Reinterpret the block of code as <code>F</code>.","","","Bind the Label to the current location.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume the assembler and get the emitted code.","","","","","","","","","","","","","","","","","","","","Create a new Runtime.","Create a new <code>x64</code> jit assembler.","","Crate prelude, which can be used to import the most …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the Label is bound, patch any pending relocation.","","","","","","","","","","","","","","","","","","","","","","","Type representing a 16 bit immediate.","Type representing a 32 bit immediate.","Type representing a 64 bit immediate.","Type representing an 8 bit immediate.","","","","A label which is used as target for jump instructions.","","","Definition of 16 bit registers.","Definition of 32 bit registers.","Definition of 64 bit registers.","Definition of 8 bit registers.","","Emit an add instruction.","","","","","","","","","","","","","","","","","","","","","","","","","","","Emit a call instruction.","","","","","","","","","","","","Emit a decrement instruction.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Emit an unconditional jump instruction.","Emit a conditional jump if not zero instruction (<code>ZF = 0</code>).","Emit a conditional jump if zero instruction (<code>ZF = 1</code>).","Emit an move instruction.","Create a new <code>unbound</code> Label.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Emit a logical compare instruction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,9,9,0,0,0,0,0,0,0,1,1,11,11,4,12,11,1,11,4,9,1,4,9,1,12,11,12,1,11,11,12,1,1,11,12,11,11,4,12,2,2,2,2,2,2,2,2,4,9,1,4,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,0,3,2,11,12,3,2,11,12,3,2,11,12,3,2,11,12,3,2,11,12,3,2,11,12,3,2,11,12,3,2,11,12,3,3,3,3,3,3,1,1,3,3,12,11,12,11,1,1,4,9,1,4,9,1,4,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,11,11,12,11,11,5,14,13,8,10,3,2,12,11,5,14,13,8,10,3,2,12,11,12,11,12,27,11,11,3,2,12,11,3,2,12,11,12,28,11,12,11,11,5,12,2,2,2,2,2,2,2,2,5,14,14,14,13,13,13,13,13,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,3,2,12,11,5,14,13,8,10,3,2,12,11,29,30,31,32,5,3,2,11,12,3,2,11,12,3,2,11,12,3,2,11,12,3,2,11,12,3,2,11,12,3,2,11,12,3,2,11,12,3,3,3,3,3,3,3,3,12,11,12,11,33,3,2,12,11,5,14,13,8,10,3,2,12,11,5,14,13,8,10,3,2,12,11,5,14,13,8,10,3,2,12,11],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,2]],[[1,3,3]],0,0,[4],0,0,[[1,5]],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[1,3]],0,0,0,[[1,2]],[[1,3]],0,0,0,0,[4],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,[[7,[6]]]],[[1,5]],[[1,5]],[[1,5]],[[1,2,8]],[[1,2,2]],[[1,9,3]],[[1,2,9]],[[1,3,3]],[[1,9,2]],[[1,3,10]],[[1,11,9]],[[1,11,11]],[[1,12,13]],[[1,11,14]],[[1,12,12]],[[1,9,12]],[[1,12,9]],[[1,9,11]],[[1,3,9]],[[[16,[[15,[6]]]]],4],[[],1],[1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,5]],[1],0,0,0,0,0,0,[[1,3,3]],[[1,2,2]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],0,0,[3,3],[2,2],[12,12],[11,11],[[]],[[]],[[]],[[]],0,[[]],0,0,0,0,[5],0,0,0,0,0,0,0,0,0,[[]],[6,14],[19,14],[[]],[[]],[6,13],[19,13],[20,13],[21,13],[20,8],[22,8],[19,8],[6,8],[23,8],[[]],[21,8],[20,10],[21,10],[19,10],[24,10],[[]],[25,10],[22,10],[6,10],[23,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18]],"c":[],"p":[[3,"Asm"],[4,"Reg32"],[4,"Reg64"],[3,"Runtime"],[3,"Label"],[15,"u8"],[3,"Vec"],[3,"Imm32"],[4,"MemOp"],[3,"Imm64"],[4,"Reg8"],[4,"Reg16"],[3,"Imm16"],[3,"Imm8"],[15,"slice"],[8,"AsRef"],[4,"Result"],[3,"TypeId"],[15,"i8"],[15,"u16"],[15,"i16"],[15,"i32"],[15,"u32"],[15,"u64"],[15,"i64"],[8,"Add"],[8,"Call"],[8,"Dec"],[8,"Jmp"],[8,"Jnz"],[8,"Jz"],[8,"Mov"],[8,"Test"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
