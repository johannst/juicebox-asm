searchState.loadedDescShard("juicebox_asm", 0, "A simple <code>x64</code> jit assembler with a minimal runtime to …\n<code>x64</code> jit assembler.\nType representing a 16 bit immediate.\nType representing a 32 bit immediate.\nType representing a 64 bit immediate.\nType representing an 8 bit immediate.\nAn indirect memory operand, eg <code>mov [rax], rcx</code>.\nAn indirect memory operand in the form base + index, eg …\nAn indirect memory operand with additional displacement, …\nA label which is used as target for jump instructions.\nType representing a memory operand.\nA memory operand with a word (16 bit) size hint.\nA memory operand with a dword (32 bit) size hint.\nA memory operand with a qword (64 bit) size hint.\nA memory operand with a word (8 bit) size hint.\nDefinition of 16 bit registers.\nDefinition of 32 bit registers.\nDefinition of 64 bit registers.\nDefinition of 8 bit registers.\nA simple <code>mmap</code>ed runtime with executable pages.\nAdd the block of <code>code</code> to the runtime and a get function …\nBind the Label to the current location.\nUnmaps the code page. This invalidates all the function …\nDump the code added so far to the runtime into a file …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a memory with size hint from a raw memory operand.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a memory with size hint from a raw memory operand.\nReturns the argument unchanged.\nCreate a memory with size hint from a raw memory operand.\nCreate a memory with size hint from a raw memory operand.\nReturns the argument unchanged.\nTrait definitions of various instructions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the assembler and get the emitted code.\nCreate a new <code>x64</code> jit assembler.\nCreate a new <code>unbound</code> Label.\nCreate a new Runtime.\nEmit a <code>nop</code> instruction.\nEmit a <code>ret</code> instruction.\nCreate a new Runtime which also generates static perf …\nTrait for <code>add</code> instruction kinds.\nTrait for <code>call</code> instruction kinds.\nTrait for <code>cmp</code> instruction kinds.\nTrait for <code>dec</code> instruction kinds.\nTrait for <code>inc</code> instruction kinds.\nTrait for <code>jmp</code> instruction kinds.\nTrait for <code>jnz</code> instruction kinds.\nTrait for <code>jz</code> instruction kinds.\nTrait for <code>mov</code> instruction kinds.\nTrait for <code>pop</code> instruction kinds.\nTrait for <code>push</code> instruction kinds.\nTrait for <code>test</code> instruction kinds.\nTrait for <code>xor</code> instruction kinds.\nEmit an add instruction.\nEmit a call instruction.\nEmit a (conditional) move if not zero instruction.\nEmit a (conditional) move if zero instruction.\nEmit a compare instruction.\nEmit a decrement instruction.\nEmit a increment instruction.\nEmit an unconditional jump instruction.\nEmit a conditional jump if not zero instruction (<code>ZF = 0</code>).\nEmit a conditional jump if zero instruction (<code>ZF = 1</code>).\nEmit an move instruction.\nEmit a pop instruction.\nEmit a push instruction.\nEmit a logical compare instruction.\nEmit a xor instruction.")